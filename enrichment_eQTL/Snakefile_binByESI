import os
import pandas

include: "../Snakefile_config"

subworkflow getESI:
    workdir: os.path.join(BASE_PATH, "lclESI_GTExV7")
    snakefile: os.path.join(BASE_PATH, "lclESI_GTExV7/Snakefile")

DIRECTORIES.update({
    'eqtlIndexDir' : "gregorRun/index_snpFiles",
    'gregorRun' : "gregorRun"
})    

SCRIPTS = {
    'pruningScript' : "scripts/pruneVariantsAndFilterMaf_1000gNCIPortal.py",
    'binByESI' : "scripts/binEgenesByESI.py",
    'binByESI_mafFilt' : "scripts/binMafFiltEgenesByESI.py",
    'makeConfFile' : "scripts/gregor_makeConf.py",
    'plotEnrich' : "scripts/plotEnrichment.R",
    'calculateCorrelation' : "scripts/correlation.R",
    'plotCorrelation' : "scripts/plotCorrelation.R",
    'compileGregorResult' : "scripts/makeDataFrame_gregor.py"
}

PARAMETERS = {
    'fdr' : 0.1,
    'mafThreshold' : 0.0,
    'pruneR2Threshold' : 0.8,
    'POPULATION' : "EUR",
    'cellName' : "Cells - EBV-transformed lymphocytes",
    'bins' : 5,
    'gregorR2Threshold' : 0.99,
    'cores': 10
    }

base = "GTExv7.{fdr}.prune{r2}.maf{maf}".format(fdr=PARAMETERS['fdr'], r2=PARAMETERS['pruneR2Threshold'], maf=PARAMETERS['mafThreshold'])

rule final:
    """
    Workflow to compute enrichment for distance to nearest protein coding gene TSS for annotations after binning by LCL ESI 
    """
    input:
        os.path.join(DIRECTORIES['figures'], "fig.enrichment_eqtlByLclESIBin.pdf"),
        os.path.join(DIRECTORIES['figures'], "fig.enrichmentCorrelationWithLclESIBin.pdf")

rule formatEqtlFile:
    input:
        eqtlfile = DATA['gtex_eqtl']
    output:
        full = os.path.join(DIRECTORIES['data'], "gtexV7.significant{fdr}.dat".format(fdr=PARAMETERS['fdr'])),
    params:
        fdr = PARAMETERS['fdr']
    run:
        d = pandas.read_csv(input[0], sep='\t', usecols=['gene_id', 'gene_name', 'tss_distance', 'chr', 'pos', 'ref', 'alt', 'rs_id_dbSNP147_GRCh37p13', 'maf', 'pval_nominal', 'slope', 'qval'])
        d.rename(columns={'rs_id_dbSNP147_GRCh37p13' : 'snp', 'chr' : 'chrom'}, inplace=True)
        d = d[d['qval'] <= params.fdr]
        d = d[~ d['snp'].isin(["rs397795305", "rs56052240","rs397791038","rs56708048"])] # Raises an error on the NCI browser
        d.sort_values(['qval'], inplace=True)
        d.drop_duplicates(['snp'], inplace=True)
        d.to_csv(output.full, sep='\t', index=False)
        
rule pruneUsingNCIPortal:
    """
    1. Prune by LD r2 < 0.8 
    """
    input:
        rules.formatEqtlFile.output
    params:
        resultDir = os.path.join(DIRECTORIES['intermediateFiles'], "pruneResults_r2{r2}_maf{maf}".format(r2=PARAMETERS['pruneR2Threshold'], maf=PARAMETERS['mafThreshold'])),
        mafThreshold = PARAMETERS['mafThreshold'],
        population = PARAMETERS['POPULATION'],
        r2Threshold = PARAMETERS['pruneR2Threshold'],
        sortName = 'qval',
        script = SCRIPTS['pruningScript']
    output:
        os.path.join(DIRECTORIES['intermediateFiles'], "{base}.dat".format(base=base))
    shell:
        r"""
        python {params.script} {input} {output} -maf {params.mafThreshold} -p {params.population} -dir {params.resultDir} -s {params.sortName} -r2 {params.r2Threshold} 
        """
        
rule mergeESIanEqtl:
    """
    Get ESI values for eQTL eGenes, make index SNP files to run GREGOR
    """
    input:
        esi = getESI("intermediateFiles/GTEx_v6p.ESI_medianTPM_min0.15.dat"),
        eqtl = rules.pruneUsingNCIPortal.output
    output:
        fullfile = os.path.join(DIRECTORIES['intermediateFiles'], "{base}.geneESI.dat".format(base=base)),
        binFiles = expand(os.path.join(DIRECTORIES['eqtlIndexDir'], "{base}.lclESIbin{binNumber}.txt"), base = base, binNumber = range(1, PARAMETERS['bins']+1))
    params:
        cellName = PARAMETERS['cellName'],
        bins = PARAMETERS['bins'],
        namestring = os.path.join(DIRECTORIES['eqtlIndexDir'], "{base}.lclESIbin".format(base=base))
    script:
        SCRIPTS['binByESI']

rule setupGREGOR:
    input:
        eqtlfile = expand(os.path.join(DIRECTORIES['eqtlIndexDir'], "{base}.lclESIbin{{binNumber}}.txt"), base=base),
        annotations = expand(DATA['annotations'], cell=CELLS, region=REGIONS)
    output:
        bedfile = os.path.join(DIRECTORIES['gregorRun'], "bedfileIndex.lclESIbin{binNumber}.txt"),
        conf = expand(os.path.join(DIRECTORIES['gregorRun'], "enrich.{base}.lclESIbin{{binNumber}}.conf"), base=base),
    params:
        script = SCRIPTS['makeConfFile'],
        gregorR2Threshold = PARAMETERS['gregorR2Threshold'],
        outputdir = lambda binNumber: os.path.join(DIRECTORIES['gregorRun'], "output_{base}_lclESIbin{binNumber}".format(base=base, binNumber=binNumber)),
        cores = PARAMETERS['cores']
    shell:
        r"""
        python {params.script} --conffile {output.conf} --snpfile {input.eqtlfile} --bedfile {output.bedfile} --gregorR2Threshold {params.gregorR2Threshold} --cores {params.cores} --outputdir {params.outputdir} --annotfiles {input.annotations};
        """
        
rule runGREGOR:
    input:
        conf = rules.setupGREGOR.output.conf
    output:
        expand(os.path.join(DIRECTORIES['gregorRun'], "output_{base}_lclESIbin{{binNumber}}", "StatisticSummaryFile.txt"), base=base)
    shell:
        r"""
        GREGOR.pl --conf {input.conf}
        """
        
rule compileGREGORdataframe:
    input:
        expand(os.path.join(DIRECTORIES['gregorRun'], "output_{base}_lclESIbin{binNumber}", "StatisticSummaryFile.txt"), base=base, binNumber = range(1, PARAMETERS['bins']+1))
    output:
        main = os.path.join(DIRECTORIES['intermediateFiles'], "stats.{base}.dat".format(base=base))
    params:
        script = SCRIPTS['compileGregorResult'],
        header = "bin cell annotation feature overlap expected_overlap pval eqtl"
    shell:
        r"""
        python {params.script} --filename {input} --outputfilename {output.main} --header {params.header};
        """
        
rule plotEnrichment:
    input:
        rules.compileGREGORdataframe.output
    output:
        os.path.join(DIRECTORIES['figures'], "fig.enrichment_eqtlByLclESIBin.pdf")
    params:
        script = SCRIPTS['plotEnrich']
    shell:
        r"""
        Rscript {params.script} {input} {output}
        """

rule calculateCorrelation:
    input:
        rules.compileGREGORdataframe.output
    output:
        os.path.join(DIRECTORIES['intermediateFiles'], "correlation_enrichmentWithLclESIbin.dat")
    params:
        script = SCRIPTS['calculateCorrelation']
    shell:
        r"""
        Rscript {params.script} {input} {output}
        """
        
rule plotCorrelation:
    input:
        rules.calculateCorrelation.output
    output:
        os.path.join(DIRECTORIES['figures'], "fig.enrichmentCorrelationWithLclESIBin.pdf")
    params:
        script = SCRIPTS['plotCorrelation']
    shell:
        r"""
        Rscript {params.script} {input} {output}
        """
    
    



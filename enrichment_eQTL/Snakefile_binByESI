import os
import pandas

include: "../Snakefile_config"
include: "Snakefile_prunePlink"

subworkflow getESI:
    workdir: os.path.join(BASE_PATH, "lclESI_GTExV7")
    snakefile: os.path.join(BASE_PATH, "lclESI_GTExV7/Snakefile")

    
DIRECTORIES.update({
    'eqtlIndexDir' : "gregorRun/index_snpFiles",
    'gregorRun' : "gregorRun"
})    

SCRIPTS = {
    'pruningScript' : "scripts/pruneVariantsAndFilterMaf_1000gNCIPortal.py",
    'binByESI' : "scripts/binEgenesByESI.py",
    'makeConfFile' : "scripts/gregor_makeConf.py",
    'plotEnrich' : "scripts/plotEnrichment.R",
    'calculateCorrelation' : "scripts/correlation.R",
    'plotCorrelation' : "scripts/plotCorrelation.R",
    'compileGregorResult' : "scripts/makeDataFrame_gregor.py"
}

PARAMETERS = {
    'fdr' : 0.1,
    'mafThreshold' : 0.0,
    'pruneR2Threshold' : 0.8,
    'POPULATION' : "EUR",
    'cellName' : "Cells - EBV-transformed lymphocytes",
    'bins' : 5,
    'gregorR2Threshold' : 0.99,
    'cores': 10
    }

base = "GTExv7.{fdr}.prune{r2}.maf{maf}".format(fdr=PARAMETERS['fdr'], r2=PARAMETERS['pruneR2Threshold'], maf=PARAMETERS['mafThreshold'])

rule final:
    """
    Workflow to compute enrichment for distance to nearest protein coding gene TSS for annotations after binning by LCL ESI 
    """
    input:
        expand(os.path.join(DIRECTORIES['figures'], "fig.enrichment_eqtlByLclESIBin.{base}.pdf"), base=base),
        expand(os.path.join(DIRECTORIES['figures'], "fig.enrichmentCorrelationWithLclESIBin.{base}.pdf"), base=base)
        
rule mergeESIanEqtl:
    """
    Get ESI values for eQTL eGenes, make index SNP files to run GREGOR
    """
    input:
        esi = getESI("intermediateFiles/GTEx_v6p.ESI_medianTPM_min0.15.dat"),
        eqtl = os.path.join(DIRECTORIES["intermediateFiles"], "{base}.dat") #rules.pruneUsingNCIPortal.output
    output:
        fullfile = os.path.join(DIRECTORIES['intermediateFiles'], "{base}.geneESI.dat"),
        binFiles = expand(os.path.join(DIRECTORIES['eqtlIndexDir'], "{{base}}.lclESIbin{binNumber}.txt"), binNumber = range(1, PARAMETERS['bins']+1))
    params:
        cellName = PARAMETERS['cellName'],
        bins = PARAMETERS['bins'],
        namestring = os.path.join(DIRECTORIES['eqtlIndexDir'], "{base}.lclESIbin")
    script:
        SCRIPTS['binByESI']

rule setupGREGOR:
    input:
        eqtlfile = os.path.join(DIRECTORIES['eqtlIndexDir'], "{base}.lclESIbin{binNumber}.txt"),
        annotations = expand(DATA['annotations'], cell=CELLS, region=REGIONS)
    output:
        bedfile = os.path.join(DIRECTORIES['gregorRun'], "bedfileIndex.{base}.lclESIbin{binNumber}.txt"),
        conf = os.path.join(DIRECTORIES['gregorRun'], "enrich.{base}.lclESIbin{binNumber}.conf"),
    params:
        script = SCRIPTS['makeConfFile'],
        gregorR2Threshold = PARAMETERS['gregorR2Threshold'],
        outputdir = os.path.join(DIRECTORIES['gregorRun'], "output_{base}_lclESIbin{binNumber}"),
        cores = PARAMETERS['cores']
    shell:
        r"""
        python {params.script} --conffile {output.conf} --snpfile {input.eqtlfile} --bedfile {output.bedfile} --gregorR2Threshold {params.gregorR2Threshold} --cores {params.cores} --outputdir {params.outputdir} --annotfiles {input.annotations};
        """
        
rule runGREGOR:
    input:
        conf = rules.setupGREGOR.output.conf
    output:
        os.path.join(DIRECTORIES['gregorRun'], "output_{base}_lclESIbin{binNumber}", "StatisticSummaryFile.txt")
    params:
        versionPath = GREGOR_SCRIPT_PATH
    shell:
        r"""
        ionice -c2 -n7 {params.versionPath} --conf {input.conf}
        """
        
rule compileGREGORdataframe:
    input:
        expand(os.path.join(DIRECTORIES['gregorRun'], "output_{{base}}_lclESIbin{binNumber}", "StatisticSummaryFile.txt"), binNumber = range(1, PARAMETERS['bins']+1))
    output:
        main = os.path.join(DIRECTORIES['intermediateFiles'], "stats.{base}.binned.dat")
    params:
        script = "/home/arushiv/toolScripts/makeDataFrame_gregor_new.py",
        header = "eqtl fdr0 fdr prune pruner2 maf bin cell annotation feature overlap expected_overlap pval", 
        nameFieldSeparator = ".",
        jobFieldSeparator = ".",
    shell:
        r"""
        python {params.script} --filename {input} --outputfilename {output.main} --nameFieldSeparator {params.nameFieldSeparator} --jobFieldSeparator {params.jobFieldSeparator} --header {params.header}
        """
        
rule plotEnrichment:
    input:
        rules.compileGREGORdataframe.output
    output:
        os.path.join(DIRECTORIES['figures'], "fig.enrichment_eqtlByLclESIBin.{base}.pdf")
    params:
        script = SCRIPTS['plotEnrich']
    shell:
        r"""
        Rscript {params.script} {input} {output}
        """

rule calculateCorrelation:
    input:
        rules.compileGREGORdataframe.output
    output:
        os.path.join(DIRECTORIES['intermediateFiles'], "correlation_enrichmentWithLclESIbin.{base}.dat")
    params:
        script = SCRIPTS['calculateCorrelation']
    shell:
        r"""
        Rscript {params.script} {input} {output}
        """
        
rule plotCorrelation:
    input:
        rules.calculateCorrelation.output
    output:
        os.path.join(DIRECTORIES['figures'], "fig.enrichmentCorrelationWithLclESIBin.{base}.pdf")
    params:
        script = SCRIPTS['plotCorrelation']
    shell:
        r"""
        Rscript {params.script} {input} {output}
        """
    
    



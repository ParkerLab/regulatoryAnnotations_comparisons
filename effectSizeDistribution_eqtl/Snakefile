import os
import pandas

include: "../Snakefile_config"

DIRECTORIES.update({
    'regression' : "regression",
    'eqtlIndexDir' : "gregorRun/index_snpFiles",
    'gregorRun' : "gregorRun"
}) 

SCRIPTS = {
    'effectVsMaf' : "scripts/plot_effectVsMaf.R",
    'pruningScript' : "scripts/pruneVariantsAndFilterMaf_1000gNCIPortal.py",
    'makeConfFile' : "scripts/gregor_makeConf.py",
    'proxyFromGREGOR' : "scripts/gregorOutputCompileLdSnps.py",
    'plot' : "scripts/plot.R",
    'regression' : "scripts/regress.py"
}

CHROM = list(range(1, 23))

PARAMETERS = {
    'POPULATION' : "EUR",
    'fdr' : 0.1,
    'prune_r2' : 0.8,
    'gregor_r2' : [0.99],
    'maf' : 0.2,
    'cores': 10
}

rule final:
    """
    GTEx gene based FDR 10% eQTL set - 
    1. Prune by LD
    2. Filter by MAF
    3. Get r2>0.99 buddies
    4. Intersect with annotations and plot
    """
    input:
        expand(os.path.join(DIRECTORIES['figures'], "gtexV7.significantfdr{fdr}.effectVsMAF.pdf"), fdr = PARAMETERS['fdr']),
        expand(os.path.join(DIRECTORIES['figures'], "fig.gtexV7.fdr{fdr}.prune{prune_r2}.maf{maf}.ld{gregor_r2}.effectSizeInannotations.pdf"),
               fdr = PARAMETERS['fdr'], prune_r2 = PARAMETERS['prune_r2'], maf = PARAMETERS['maf'], gregor_r2 = PARAMETERS['gregor_r2']),
        expand(os.path.join(DIRECTORIES['regression'], "regress_SEvsTE.allInfo.gtex.fdr{fdr}.prune{prune_r2}.maf{maf}.ld{gregor_r2}.ATACPeaksChromStates.dat"),
               fdr = PARAMETERS['fdr'], prune_r2 = PARAMETERS['prune_r2'], maf = PARAMETERS['maf'], gregor_r2 = PARAMETERS['gregor_r2'])
        
rule formatEqtlFile:
    input:
        eqtlfile = DATA['gtex_eqtl']
    output:
        full = os.path.join(DIRECTORIES['data'], "gtexV7.significantfdr{fdr}.dat"),
    params:
        fdr = lambda wildcards: wildcards.fdr
    run:
        d = pandas.read_csv(input[0], sep='\t', usecols=['gene_id', 'gene_name', 'tss_distance', 'chr', 'pos', 'ref', 'alt', 'rs_id_dbSNP147_GRCh37p13', 'maf', 'pval_nominal', 'slope', 'qval'])
        d.rename(columns={'rs_id_dbSNP147_GRCh37p13' : 'snp', 'chr' : 'chrom'}, inplace=True)
        d = d[d['qval'] <= float(params.fdr)]
        d = d[~ d['snp'].isin(["rs397795305", "rs56052240","rs397791038","rs56708048"])] # Raises an error on the NCI browser
        d.sort_values(['qval'], inplace=True)
        d.drop_duplicates(['snp'], inplace=True)
        d.to_csv(output.full, sep='\t', index=False)

rule plotEffectVsMAF:
    input:
        rules.formatEqtlFile.output
    output:
        os.path.join(DIRECTORIES['figures'], "gtexV7.significantfdr{fdr}.effectVsMAF.pdf")
    params:
        script = SCRIPTS['effectVsMaf']
    shell:
        r"""
        Rscript {params.script} {input} {output}
        """
                                                                                                               
rule pruneUsingNCIPortal:
    """
    1. Prune by LD
    2. Filter by MAF
    """
    input:
        rules.formatEqtlFile.output
    params:
        resultDir = lambda wildcards: os.path.join(DIRECTORIES['intermediateFiles'], "gtex.fdr{fdr}.pruneResults{prune_r2}.maf{maf}"),
        mafThreshold = lambda wildcards: "{maf}",
        population = PARAMETERS['POPULATION'],
        r2Threshold = lambda wildcards: "{prune_r2}",
        sortName = 'qval',
        script = SCRIPTS['pruningScript']
    output:
        os.path.join(DIRECTORIES['intermediateFiles'], "gtexV7.fdr{fdr}.pruned{prune_r2}.maf{maf}.dat")
    shell:
        r"""
        python {params.script} {input} {output} -maf {params.mafThreshold} -p {params.population} -dir {params.resultDir} -s {params.sortName} -r2 {params.r2Threshold} 
        """

rule setupGREGOR:
    input:
        eqtlfile = rules.pruneUsingNCIPortal.output,
        annotations = expand(DATA['annotations'], cell="GM12878", region = REGIONS),
    output:
        snpfile = os.path.join(DIRECTORIES['eqtlIndexDir'], "gtex.fdr{fdr}.prune{prune_r2}.maf{maf}.ld{gregor_r2}.txt"),
        bedfile = os.path.join(DIRECTORIES['gregorRun'], "bedfileIndex.gtex.fdr{fdr}.prune{prune_r2}.maf{maf}.ld{gregor_r2}.txt"),
        conf = os.path.join(DIRECTORIES['gregorRun'], "enrich.gtex.fdr{fdr}.prune{prune_r2}.maf{maf}.ld{gregor_r2}.conf"),
    params:
        script = SCRIPTS['makeConfFile'],
        population = PARAMETERS['POPULATION'],
        gregorR2Threshold = lambda wildcards: "{gregor_r2}",
        outputdir = lambda wildcards: os.path.join(DIRECTORIES['gregorRun'], "output_gtex.fdr{fdr}.prune{prune_r2}.maf{maf}.ld{gregor_r2}"),
        cores = PARAMETERS['cores']
    shell:
        r"""
        less {input.eqtlfile} | grep -v Allele | awk '{{print "chr"$4":"$5}}' | sort | uniq > {output.snpfile} ;
        python {params.script} --conffile {output.conf} --snpfile {output.snpfile} --bedfile {output.bedfile} --gregorR2Threshold {params.gregorR2Threshold} --cores {params.cores} --outputdir {params.outputdir} --annotfiles {input.annotations} --population {params.population};
        """
        
rule runGREGOR:
    input:
        conf = rules.setupGREGOR.output.conf
    output:
        os.path.join(DIRECTORIES['gregorRun'], "output_gtex.fdr{fdr}.prune{prune_r2}.maf{maf}.ld{gregor_r2}/index_SNP/index.snp.LD.txt"),
        os.path.join(DIRECTORIES['gregorRun'], "output_gtex.fdr{fdr}.prune{prune_r2}.maf{maf}.ld{gregor_r2}/StatisticSummaryFile.txt")
    shell:
        r"""
        ionice -c2 -n7 GREGOR.pl --conf {input.conf}
        """
        
rule getProxies:
    """
    Get r2 proxies - use GREGOR output.
    """
    input:
        os.path.join(DIRECTORIES['gregorRun'], "output_gtex.fdr{fdr}.prune{prune_r2}.maf{maf}.ld{gregor_r2}/index_SNP/index.snp.LD.txt")
    output:
        os.path.join(DIRECTORIES['intermediateFiles'], "ldbuddiesFromGREGOR_gtex.fdr{fdr}.prune{prune_r2}.maf{maf}.ld{gregor_r2}.dat")
    params:
        script = SCRIPTS['proxyFromGREGOR'],
    shell:
        r"""
        python {params.script} {input} {output};
        """
       
rule organizeEqtlDF:
    """
    Merge proxies with pruned eQTL lead SNPs
    remove unwanted columns
    """
    input:
        proxyfile = rules.getProxies.output,
        eqtlfile = rules.pruneUsingNCIPortal.output
    output:
        os.path.join(DIRECTORIES['intermediateFiles'], "gtexV7.fdr{fdr}.prune{prune_r2}.maf{maf}.ld{gregor_r2}.dat")
    run:
        eqtlfile = pandas.read_csv(input.eqtlfile[0], sep='\t')
        eqtlfile.loc[:,'chrom'] = eqtlfile['chrom'].map(lambda x: "chr{chrom}".format(chrom=x))
        eqtlfile.rename(columns={'pos' : 'indexPos'}, inplace=True)
        
        proxyfile = pandas.read_csv(input.proxyfile[0], sep='\t', header=None, names=['chrom','proxyStart','proxyEnd','indexPos'])
        outdf = pandas.merge(proxyfile, eqtlfile, how="right", on=['chrom','indexPos'])
        outdf.proxyEnd.fillna(outdf.indexPos, inplace=True)
        outdf.proxyStart.fillna(outdf.indexPos - 1, inplace=True)
        outdf[['proxyStart','proxyEnd']] = outdf[['proxyStart','proxyEnd']].astype(int)
        d1 = outdf.groupby(['chrom','indexPos','gene_name']).size().reset_index(name='totalnumLD')
        ndf = pandas.merge(outdf, d1, how="left", on=['chrom','indexPos','gene_name'])
        ndf.to_csv(output[0], sep='\t', index=False, na_rep="NA")

def getHeaderList(filename, extendlist):
    with open(filename, 'r') as f:
        l = f.readline().rstrip().split('\t')
        l.extend(extendlist)
        return l

rule getHeaderString:
    input:
        proxyfile = rules.organizeEqtlDF.output
    output:
        os.path.join(DIRECTORIES['intermediateFiles'], "headerstring.gtex.fdr{fdr}.prune{prune_r2}.maf{maf}.ld{gregor_r2}.dat")
    run:
        var = '\t'.join(getHeaderList(input.proxyfile[0], ['cell','annotation']))
        with open(output[0], 'w') as the_file:
            the_file.write("{var}\n".format(var=var))
            
rule intersectAnnotations:
    """
    Intersect annotations with eQTL proxy SNPs
    """
    input:
        eqtlfile = rules.organizeEqtlDF.output,
        annotations = expand(DATA['annotations'], cell="GM12878", region = REGIONS),
        headerString = rules.getHeaderString.output
    output:
        main = os.path.join(DIRECTORIES['intermediateFiles'], "GM12878.fdr{fdr}.prune{prune_r2}.maf{maf}.ld{gregor_r2}.annotations.dat"),
        tempout = temp(os.path.join(DIRECTORIES['intermediateFiles'], "GM12878.fdr{fdr}.prune{prune_r2}.maf{maf}.ld{gregor_r2}.annotations.dat.temp"))
    shell:
        r"""
        for i in {input.annotations}; do b=`basename $i .annotations.bed | sed -e 's:\.:\t:g'`; grep -v chrom {input.eqtlfile} | intersectBed -a - -b $i | awk '{{print $0"\t""'"$b"'"}}' OFS='\t'; done | sort | uniq  > {output.tempout};
        cat {input.headerString} {output.tempout} > {output.main};
        """
    
rule plot:
    input:
        rules.intersectAnnotations.output.main
    output:
        os.path.join(DIRECTORIES['figures'], "fig.gtexV7.fdr{fdr}.prune{prune_r2}.maf{maf}.ld{gregor_r2}.effectSizeInannotations.pdf")
    params:
        script = SCRIPTS['plot']
    shell:
        r""" 
        Rscript {params.script} {input} {output}
        """ 
        
rule regress:
    input:
        rules.intersectAnnotations.output.main
    output:
        os.path.join(DIRECTORIES['regression'], "regress_SEvsTE.allInfo.gtex.fdr{fdr}.prune{prune_r2}.maf{maf}.ld{gregor_r2}.ATACPeaksChromStates.dat"),
    params:
        script = SCRIPTS['regression']
    shell:
        r"""
        python {params.script} --inputfile {input} --typereg intpeaks > {output};
        """
                                                                    
rule setup_powerCalc:
    input:
        expand(rules.intersectAnnotations.output.main, fdr=0.1, prune_r2=0.8, maf=0.2, gregor_r2=0.99)
    output:
        os.path.join(DIRECTORIES['intermediateFiles'], "summaryByAnnotation.txt")
    run:
        d = pandas.read_csv(input[0], sep="\t")
        d.drop_duplicates(['chrom','snp','annotation'], inplace=True)
        d.loc[:,'absoluteEffect'] = abs(d['slope'])
        nd = d.groupby('annotation')['absoluteBeta'].describe().reset_index().rename(columns={'25%':'p_25','50%':'p_50','75%':'p_75'})
        nd.to_csv(output[0], sep='\t', index=False)
        
rule plot_power:
    input:
        rules.setup_powerCalc.output
    output:
        os.path.join(DIRECTORIES['figures'], "GM12878.powerCalc.pdf")
    params:
        script = SCRIPTS['powerCalc']
    shell:
        r"""
        Rscript {params.script} {input} {output}
        """
                                                                                                                                                        

import os

include: "../Snakefile_config"

SCRIPTS = {
    'plot' : "scripts/plot_compare.R",
    'merge' : "scripts/merge2FilesByColnames.py"
}

vcf = DATA['1000g']
#"/lab/data/genomes/human/hg19/1000GenomesDownloads/ALL.chr{chrom}.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz"
# expected_fracRef = "data/GM12878.post_mpileup.err"

rule final:
    """
    Plot absolute deviation from expectation for allelic biased SNPs lying in different annotations
    """
    input:
        expand(os.path.join(DIRECTORIES['figures'], "fig.deviationFromExpectation_correct_downsampled{depth}_withAndWithoutMaf2Filt.pdf"), depth = [20, 30, 40])


headerList = ['chrom', 'start', 'end', 'allele_1', 'allele_2', 'ref', 'total_coverage', 'ref_coverage', 'fraction_ref', 'p', 'sig', 'log10p', 'SNP_pair']
headerString_getExpectedFracRef = ' '.join(headerList)

rule create_downsampled:
    input:
        biasdata = DATA['gm_allelic_bias'], #"data/GM12878.post_mpileup.out",
        expectation = DATA['gm_expected_deviation'], #expected_fracRef,
    output:
        main = os.path.join(DIRECTORIES['intermediateFiles'], "results.downsampled_to_{depth}/GM12878.snps.downsampled.bed") 
    params:
        script = "scripts/downsample_snps.R"
    shell:
        """
        Rscript {params.script} --snps {input.biasdata} --expectation {input.expectation} --depth {wildcards.depth} --prefix GM12878 --out_dir intermediateFiles/results.downsampled_to_{wildcards.depth}
        """

rule getExpectedFracRef:        
    """
    Columns in datafile are "chromosome", "start", "end", "allele_1", "allele_2", "ref", "total_coverage", "ref_coverage", "fraction_ref", "p.value", "significant", "neg_log_10_p.value", "SNP_pair".
    The file includes all SNPs with minimum coverage = 3.
    """
    input:
        expectation = DATA['gm_expected_deviation'],
        datfile = rules.create_downsampled.output.main
    output:
        bedfile = temp(os.path.join(DIRECTORIES['intermediateFiles'], "positions.downsampled{depth}.bed")),
        main = os.path.join(DIRECTORIES['intermediateFiles'], "GM12878.allelicBiasResults.downsampled{depth}.FracRef.dat")
    shell:
        """
        less {input.datfile} | grep -v chrom | cut -f1-3 | sed -e 's:chr::g' | sort | uniq > {output.bedfile} ;
        python ~arushiv/toolScripts/merge2FilesByColnames.py {input.datfile} {input.expectation} {output.main} -h1 {headerString_getExpectedFracRef} -h2 SNP_pair expectedFracRef -t inner -on SNP_pair"""

rule getMAF:
    input:
        datfile = rules.getExpectedFracRef.output.main,
        bedfile = rules.getExpectedFracRef.output.bedfile,
        vcf = vcf
    output:
        withmaf = temp(os.path.join(DIRECTORIES['intermediateFiles'], "downsampled{depth}.chr{chrom}.dat.INFO")),
        main = temp(os.path.join(DIRECTORIES['intermediateFiles'], "downsampled{depth}.chr{chrom}.withMAF.dat"))
    params:
        outstring = os.path.join(DIRECTORIES['intermediateFiles'], "downsampled{depth}.chr{chrom}.dat"),
        mergeScript = SCRIPTS['merge']
    shell:
        r"""
        vcftools --gzvcf {input.vcf} --bed {input.bedfile} --get-INFO EUR_AF  --out {params.outstring} ; 
        awk '{{print "chr"$0}}' OFS='\t' {output.withmaf} | grep -v chrCHROM > {output.withmaf}.temp; mv {output.withmaf}.temp {output.withmaf} ; 
        python {params.mergeScript} {input.datfile} {output.withmaf} {output.main} -h2 chrom end ref_x alt altFreq -on chrom end -t inner 
        """

rule compileMAF:
    input:
        expand(os.path.join(DIRECTORIES['intermediateFiles'], "downsampled{{depth}}.chr{chrom}.withMAF.dat"), chrom=CHROM),
    output:
        main = os.path.join(DIRECTORIES['intermediateFiles'], "GM12878.allelicBiasResults.FracRef.downsampled{depth}.withMAF.dat")
    shell:
        """
        cat {input} | sort -r | uniq  > {output}
        """
        
rule intersectAnnotations:
    input:
        snp = rules.compileMAF.output.main,
        annotations = expand(DATA['annotations'], cell="GM12878", region=REGIONS)
    output:
        os.path.join(DIRECTORIES['intermediateFiles'], "GM12878.allelicBiasResults.FracRef.downsampled{depth}.annotations.withMAF.dat")
    run:
        with open(input[0], 'r') as f:
            headerString_intersectAnnotations = f.readline().rstrip() + '\tcell\tannotation'
            print(headerString_intersectAnnotations)
        shell(
            r"""
            for i in {input.annotations}; do b=`basename $i .annotations.bed | sed -e 's:\.:\t:g'`; grep -v chrom {input.snp} | intersectBed -a - -b $i | awk '{{print $0"\t""'"$b"'"}}' OFS='\t'; done > {output};
            echo {headerString_intersectAnnotations} | cat - {output} > temp;
            mv temp {output};
            """
            )

rule plot:
    input:
        rules.intersectAnnotations.output
    output:
        os.path.join(DIRECTORIES['figures'], "fig.deviationFromExpectation_correct_downsampled{depth}_withAndWithoutMaf2Filt.pdf")
    params:
        script = SCRIPTS['plot']
    shell:
        r"""
        Rscript {params.script} {input} {output}
        """
